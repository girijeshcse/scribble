{
  
    
        "post0": {
            "title": "Chapter 2.2 work in progress...",
            "content": "Audio . import numpy as np import torch torch.set_printoptions(edgeitems=2, threshold=50) . Sound can be seen as fluctuations of pressure of a medium, air for instance, at a certain location in time. There are other representations that we&#39;ll get into in a minute, but we can think about this as the raw, time-domain representation. In order for the human ear to appreciate sound, pressure must fluctuate with a frequency between 20 and 20000 oscillations per second (measured in Hertz, Hz). More oscillations per second will lead to a higher perceived pitch. . By recording pressure fluctuations in time using a microphone and converting every pressure level at each time point into a number (e.g. a 16-bit integer), we can now represent sound as a vector of numbers. This is known as Pulse Code Modulation (PCM), where a continuous signal is both sampled in time and quantized in amplitude. If we want to make sure we hear the highest possible pitch in a recording, we&#39;ll have to record our samples at slightly more than twice the maximum audible frequency, i.e. just over 40000 times per second. It is not by chance that audio CD&#39;s have a sampling frequency of 44100 Hz. This means that a one-hour stereo (i.e. 2 channels) CD track where samples are recorded at 16-bit precision will amount to 2 * 16 * 44100 * 3600 = 5080320000 bit = 605.6 MB if stored without compression. . There are a plethora of audio formats, WAV, AIFF, MP3, AAC being the most popular, where raw audio signals are typically encoded in compressed form by leveraging on both correlation between successive samples in the time series, between the two stereo channels as well as elimination of barely audible frequencies. This can result in dramatic reduction of storage requirements (a one-hour audio file in AAC format takes less than 60 MB). In addition, audio players can decode these formats on the fly on dedicated hardware, consuming a tiny amount of power. . In our data scientist role we may have to feed audio samples to our network and classify them, or generate captions, for instance. In that case, we won&#39;t work with compressed data, rather we&#39;ll have to find a way to load an audio file in some format and lay it out as an uncompressed time series in a tensor. Let&#39;s do that now. . We can download a fair number of environmental sounds at the ESC-50 repository (https://github.com/karoldvl/ESC-50) in the audio directory. Let&#39;s get 1-100038-A-14.wav for instance, containing the sound of a bird chirping. . In order to load the sound we resort to SciPy, specifically scipy.io.wavfile.read, which has the nice property to return data as a NumPy array: . !pip install scipy . Collecting scipy Downloading scipy-1.7.1-cp37-cp37m-win_amd64.whl (33.6 MB) Requirement already satisfied: numpy&lt;1.23.0,&gt;=1.16.5 in c: users hp .conda envs pytorch lib site-packages (from scipy) (1.17.0) Installing collected packages: scipy Successfully installed scipy-1.7.1 . import scipy.io.wavfile as wavfile freq, waveform_arr = wavfile.read(&#39;../data/p1ch4/audio-chirp/1-100038-A-14.wav&#39;) freq, waveform_arr . (44100, array([ -388, -3387, -4634, ..., 2289, 1327, 90], dtype=int16)) . The read function returns two outputs, namely the sampling frequency and the waveform as a 16-bit integer 1D array. It&#39;s a single 1D array, which tells us that it&#39;s a mono recording - we&#39;d have two waveforms (two channels) if the sound were stereo. . We can convert the array to a tensor and we&#39;re good to go. We might also want to convert the waveform tensor to a float tensor since we&#39;re at it. . waveform = torch.from_numpy(waveform_arr).float() waveform.shape . torch.Size([220500]) . In a typical dataset, we&#39;ll have more than one waveform, and possibly over more than one channel. Depending on the kind of network employed for carrying out a task, for instance a sound classification task, we would be required to lay out the tensor in one of two ways. . For architectures based on filtering the 1D signal with cascades of learned filter banks, such as convolutional networks, we would need to lay out the tensor as N x C x L, where N is the number of sounds in a dataset, C the number of channels and L the number of samples in time. . Conversely, for architectures that incorporate the notion of temporal sequences, just as recurrent networks we mentioned for text, data needs to be laid out as L x N x C - sequence length comes first. Intuitively, this is because the latter architectures take one set of C values at a time - the signal is not considered as a whole, but as an individual input changing in time. . Although the most straightforward, this is only one of the ways to represent audio so that it is digestible by a neural network. Anther way is turning the audio signal into a spectrogram. . Instead of representing oscillations explicitly in time, we can characterize what at frequencies those oscillations occur for short time intervals. So, for instance, if we pluck the fifth string of our (hopefully tuned) guitar and we focus on 0.1 seconds of that recording, we will see that the waveform oscillates at 440 cycles per second, plus smaller spurious oscillations at different frequencies that make up the timbre of the sound. If we move on to subsequent 0.1 second intervals, we now see that the frequency content doesn&#39;t change, but the intensity does, as the sound of our string fades. If we now decide to pluck another string, we will observe new frequencies fading in time. . We could indeed build a plot having time in the X-axis, frequencies heard at that time in the Y-axis and encode intensity of those frequencies as a value at that X and Y. Or color. Ok, that starts to look like an image, right? . That&#39;s correct, spectrograms are a representation of the intensity at each frequency at each point in time. It turns out that one can train convolutional neural networks built for analyzing images (we&#39;ll see about those in a couple of chapters) on sound represented as a spectrogram. . Let&#39;s see how we can turn the sound we loaded earlier into a spectrogram. To do that, we need to resort to a method for converting a signal in the time domain into its frequency content. This is known as the Fourier transform, and the algorithm that allows us to compute it efficiently is the Fast Fourier Trasform (FFT), which is one of the most widespread algorithms out there. If we do that consecutively for short bursts of sound in time, we can build out spectrogram column by column. . This is the general idea and we won&#39;t go into too many details here. Luckily for us SciPy has a function that gets us a shiny spectrogram given an input waveform. We import the signal module from SciPy, then provide the spectrogram function with the waveform and the sampling frequency that we got previously. The return values are all NumPy arrays, namely frequency f_arr (values along the Y axis), time t_arr (values along the X axis) and the actual spectrogra sp_arr as a 2D array. Turning the latter into a PyTorch tensor is trivial: . from scipy import signal f_arr, t_arr, sp_arr = signal.spectrogram(waveform_arr, freq) sp_mono = torch.from_numpy(sp_arr) sp_mono.shape . torch.Size([129, 984]) . Dimensions are F x T, where F is frequency and T is time. . As we mentioned earlier, stereo sound has two channels, which will lead to a two-channel spectrogram. Suppose we have two spectrograms, one for each channel. We can convert the two channels separately: . sp_left = sp_right = sp_arr sp_left_t = torch.from_numpy(sp_left) sp_right_t = torch.from_numpy(sp_right) sp_left_t.shape, sp_right_t.shape . (torch.Size([129, 984]), torch.Size([129, 984])) . and stack the two tensors along the first dimension to obtain a two channels image of size C x F x T, where C is the number channels: . sp_t = torch.stack((sp_left_t, sp_right_t), dim=0) sp_t.shape . torch.Size([2, 129, 984]) . If we want to build a dataset to use as input for a network, we will stack multiple spectrograms representing multiple sounds in a dataset along the first dimension, leading to a N x C x F x T tensor. . Such tensor is indistinguishable from what we would build for a dataset set of images, where F is represents rows and T columns of an image. Indeed, we would tackle a sound classification problem on spectrograms with the exact same networks. .",
            "url": "https://girijeshcse.github.io/scribble/jupyter/2021/09/07/x-audio-chirp.html",
            "relUrl": "/jupyter/2021/09/07/x-audio-chirp.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "import numpy as np import torch torch.set_printoptions(edgeitems=2, threshold=50) . import imageio dir_path = &quot;../data/p1ch4/volumetric-dicom/2-LUNG 3.0 B70f-04083&quot; vol_arr = imageio.volread(dir_path, &#39;DICOM&#39;) vol_arr.shape . Reading DICOM (examining files): 1/99 files (1.0%99/99 files (100.0%) Found 1 correct series. Reading DICOM (loading data): 31/99 (31.392/99 (92.999/99 (100.0%) . (99, 512, 512) . vol = torch.from_numpy(vol_arr).float() vol = torch.unsqueeze(vol, 0) vol.shape . torch.Size([1, 99, 512, 512]) . %matplotlib inline import matplotlib.pyplot as plt plt.imshow(vol_arr[50]) . &lt;matplotlib.image.AxesImage at 0x12f59c22c18&gt; .",
            "url": "https://girijeshcse.github.io/scribble/2021/09/07/volumetric-ct.html",
            "relUrl": "/2021/09/07/volumetric-ct.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "import numpy as np import torch torch.set_printoptions(edgeitems=2, threshold=50, linewidth=75) . bikes_numpy = np.loadtxt( &quot;../data/p1ch4/bike-sharing-dataset/hour-fixed.csv&quot;, dtype=np.float32, delimiter=&quot;,&quot;, skiprows=1, converters={1: lambda x: float(x[8:10])}) # &lt;1&gt; bikes = torch.from_numpy(bikes_numpy) bikes . tensor([[1.0000e+00, 1.0000e+00, ..., 1.3000e+01, 1.6000e+01], [2.0000e+00, 1.0000e+00, ..., 3.2000e+01, 4.0000e+01], ..., [1.7378e+04, 3.1000e+01, ..., 4.8000e+01, 6.1000e+01], [1.7379e+04, 3.1000e+01, ..., 3.7000e+01, 4.9000e+01]]) . bikes.shape, bikes.stride() . (torch.Size([17520, 17]), (17, 1)) . daily_bikes = bikes.view(-1, 24, bikes.shape[1]) daily_bikes.shape, daily_bikes.stride() . (torch.Size([730, 24, 17]), (408, 17, 1)) . daily_bikes = daily_bikes.transpose(1, 2) daily_bikes.shape, daily_bikes.stride() . (torch.Size([730, 17, 24]), (408, 1, 17)) . first_day = bikes[:24].long() weather_onehot = torch.zeros(first_day.shape[0], 4) first_day[:,9] . tensor([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2]) . weather_onehot.scatter_( dim=1, index=first_day[:,9].unsqueeze(1).long() - 1, # &lt;1&gt; value=1.0) . tensor([[1., 0., 0., 0.], [1., 0., 0., 0.], ..., [0., 1., 0., 0.], [0., 1., 0., 0.]]) . torch.cat((bikes[:24], weather_onehot), 1)[:1] . tensor([[ 1.0000, 1.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 6.0000, 0.0000, 1.0000, 0.2400, 0.2879, 0.8100, 0.0000, 3.0000, 13.0000, 16.0000, 1.0000, 0.0000, 0.0000, 0.0000]]) . daily_weather_onehot = torch.zeros(daily_bikes.shape[0], 4, daily_bikes.shape[2]) daily_weather_onehot.shape . torch.Size([730, 4, 24]) . daily_weather_onehot.scatter_( 1, daily_bikes[:,9,:].long().unsqueeze(1) - 1, 1.0) daily_weather_onehot.shape . torch.Size([730, 4, 24]) . daily_bikes = torch.cat((daily_bikes, daily_weather_onehot), dim=1) . daily_bikes[:, 9, :] = (daily_bikes[:, 9, :] - 1.0) / 3.0 . temp = daily_bikes[:, 10, :] temp_min = torch.min(temp) temp_max = torch.max(temp) daily_bikes[:, 10, :] = ((daily_bikes[:, 10, :] - temp_min) / (temp_max - temp_min)) . temp = daily_bikes[:, 10, :] daily_bikes[:, 10, :] = ((daily_bikes[:, 10, :] - torch.mean(temp)) / torch.std(temp)) .",
            "url": "https://girijeshcse.github.io/scribble/2021/09/07/time-series-bikes.html",
            "relUrl": "/2021/09/07/time-series-bikes.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "import numpy as np import torch torch.set_printoptions(edgeitems=2, threshold=50) . with open(&#39;../data/p1ch4/jane-austen/1342-0.txt&#39;, encoding=&#39;utf8&#39;) as f: text = f.read() . lines = text.split(&#39; n&#39;) line = lines[200] line . &#39;“Impossible, Mr. Bennet, impossible, when I am not acquainted with him&#39; . letter_t = torch.zeros(len(line), 128) # &lt;1&gt; letter_t.shape . torch.Size([70, 128]) . for i, letter in enumerate(line.lower().strip()): letter_index = ord(letter) if ord(letter) &lt; 128 else 0 # &lt;1&gt; letter_t[i][letter_index] = 1 . def clean_words(input_str): punctuation = &#39;.,;:&quot;!?”“_-&#39; word_list = input_str.lower().replace(&#39; n&#39;,&#39; &#39;).split() word_list = [word.strip(punctuation) for word in word_list] return word_list words_in_line = clean_words(line) line, words_in_line . (&#39;“Impossible, Mr. Bennet, impossible, when I am not acquainted with him&#39;, [&#39;impossible&#39;, &#39;mr&#39;, &#39;bennet&#39;, &#39;impossible&#39;, &#39;when&#39;, &#39;i&#39;, &#39;am&#39;, &#39;not&#39;, &#39;acquainted&#39;, &#39;with&#39;, &#39;him&#39;]) . word_list = sorted(set(clean_words(text))) word2index_dict = {word: i for (i, word) in enumerate(word_list)} len(word2index_dict), word2index_dict[&#39;impossible&#39;] . (7261, 3394) . word_t = torch.zeros(len(words_in_line), len(word2index_dict)) for i, word in enumerate(words_in_line): word_index = word2index_dict[word] word_t[i][word_index] = 1 print(&#39;{:2} {:4} {}&#39;.format(i, word_index, word)) print(word_t.shape) . 0 3394 impossible 1 4305 mr 2 813 bennet 3 3394 impossible 4 7078 when 5 3315 i 6 415 am 7 4436 not 8 239 acquainted 9 7148 with 10 3215 him torch.Size([11, 7261]) . word_t = word_t.unsqueeze(1) word_t.shape . torch.Size([11, 1, 7261]) . [(c, ord(c)) for c in sorted(set(text))] . [(&#39; n&#39;, 10), (&#39; &#39;, 32), (&#39;!&#39;, 33), (&#39;#&#39;, 35), (&#39;$&#39;, 36), (&#39;%&#39;, 37), (&#34;&#39;&#34;, 39), (&#39;(&#39;, 40), (&#39;)&#39;, 41), (&#39;*&#39;, 42), (&#39;,&#39;, 44), (&#39;-&#39;, 45), (&#39;.&#39;, 46), (&#39;/&#39;, 47), (&#39;0&#39;, 48), (&#39;1&#39;, 49), (&#39;2&#39;, 50), (&#39;3&#39;, 51), (&#39;4&#39;, 52), (&#39;5&#39;, 53), (&#39;6&#39;, 54), (&#39;7&#39;, 55), (&#39;8&#39;, 56), (&#39;9&#39;, 57), (&#39;:&#39;, 58), (&#39;;&#39;, 59), (&#39;?&#39;, 63), (&#39;@&#39;, 64), (&#39;A&#39;, 65), (&#39;B&#39;, 66), (&#39;C&#39;, 67), (&#39;D&#39;, 68), (&#39;E&#39;, 69), (&#39;F&#39;, 70), (&#39;G&#39;, 71), (&#39;H&#39;, 72), (&#39;I&#39;, 73), (&#39;J&#39;, 74), (&#39;K&#39;, 75), (&#39;L&#39;, 76), (&#39;M&#39;, 77), (&#39;N&#39;, 78), (&#39;O&#39;, 79), (&#39;P&#39;, 80), (&#39;Q&#39;, 81), (&#39;R&#39;, 82), (&#39;S&#39;, 83), (&#39;T&#39;, 84), (&#39;U&#39;, 85), (&#39;V&#39;, 86), (&#39;W&#39;, 87), (&#39;X&#39;, 88), (&#39;Y&#39;, 89), (&#39;Z&#39;, 90), (&#39;[&#39;, 91), (&#39;]&#39;, 93), (&#39;_&#39;, 95), (&#39;a&#39;, 97), (&#39;b&#39;, 98), (&#39;c&#39;, 99), (&#39;d&#39;, 100), (&#39;e&#39;, 101), (&#39;f&#39;, 102), (&#39;g&#39;, 103), (&#39;h&#39;, 104), (&#39;i&#39;, 105), (&#39;j&#39;, 106), (&#39;k&#39;, 107), (&#39;l&#39;, 108), (&#39;m&#39;, 109), (&#39;n&#39;, 110), (&#39;o&#39;, 111), (&#39;p&#39;, 112), (&#39;q&#39;, 113), (&#39;r&#39;, 114), (&#39;s&#39;, 115), (&#39;t&#39;, 116), (&#39;u&#39;, 117), (&#39;v&#39;, 118), (&#39;w&#39;, 119), (&#39;x&#39;, 120), (&#39;y&#39;, 121), (&#39;z&#39;, 122), (&#39;“&#39;, 8220), (&#39;”&#39;, 8221), (&#39; ufeff&#39;, 65279)] . ord(&#39;l&#39; ) . 108 .",
            "url": "https://girijeshcse.github.io/scribble/2021/09/07/text-jane-austen.html",
            "relUrl": "/2021/09/07/text-jane-austen.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "import numpy as np import torch torch.set_printoptions(edgeitems=2, precision=2, linewidth=75) . import csv wine_path = &quot;../data/p1ch4/tabular-wine/winequality-white.csv&quot; wineq_numpy = np.loadtxt(wine_path, dtype=np.float32, delimiter=&quot;;&quot;, skiprows=1) wineq_numpy . array([[ 7. , 0.27, 0.36, ..., 0.45, 8.8 , 6. ], [ 6.3 , 0.3 , 0.34, ..., 0.49, 9.5 , 6. ], [ 8.1 , 0.28, 0.4 , ..., 0.44, 10.1 , 6. ], ..., [ 6.5 , 0.24, 0.19, ..., 0.46, 9.4 , 6. ], [ 5.5 , 0.29, 0.3 , ..., 0.38, 12.8 , 7. ], [ 6. , 0.21, 0.38, ..., 0.32, 11.8 , 6. ]], dtype=float32) . col_list = next(csv.reader(open(wine_path), delimiter=&#39;;&#39;)) wineq_numpy.shape, col_list . ((4898, 12), [&#39;fixed acidity&#39;, &#39;volatile acidity&#39;, &#39;citric acid&#39;, &#39;residual sugar&#39;, &#39;chlorides&#39;, &#39;free sulfur dioxide&#39;, &#39;total sulfur dioxide&#39;, &#39;density&#39;, &#39;pH&#39;, &#39;sulphates&#39;, &#39;alcohol&#39;, &#39;quality&#39;]) . wineq = torch.from_numpy(wineq_numpy) wineq.shape, wineq.dtype . (torch.Size([4898, 12]), torch.float32) . data = wineq[:, :-1] # &lt;1&gt; data, data.shape . (tensor([[ 7.00, 0.27, ..., 0.45, 8.80], [ 6.30, 0.30, ..., 0.49, 9.50], ..., [ 5.50, 0.29, ..., 0.38, 12.80], [ 6.00, 0.21, ..., 0.32, 11.80]]), torch.Size([4898, 11])) . target = wineq[:, -1] # &lt;2&gt; target, target.shape . (tensor([6., 6., ..., 7., 6.]), torch.Size([4898])) . target = wineq[:, -1].long() target . tensor([6, 6, ..., 7, 6]) . target_onehot = torch.zeros(target.shape[0], 10) target_onehot.scatter_(1, target.unsqueeze(1), 1.0) . tensor([[0., 0., ..., 0., 0.], [0., 0., ..., 0., 0.], ..., [0., 0., ..., 0., 0.], [0., 0., ..., 0., 0.]]) . target_unsqueezed = target.unsqueeze(1) target_unsqueezed . tensor([[6], [6], ..., [7], [6]]) . data_mean = torch.mean(data, dim=0) data_mean . tensor([6.85e+00, 2.78e-01, 3.34e-01, 6.39e+00, 4.58e-02, 3.53e+01, 1.38e+02, 9.94e-01, 3.19e+00, 4.90e-01, 1.05e+01]) . data_var = torch.var(data, dim=0) data_var . tensor([7.12e-01, 1.02e-02, 1.46e-02, 2.57e+01, 4.77e-04, 2.89e+02, 1.81e+03, 8.95e-06, 2.28e-02, 1.30e-02, 1.51e+00]) . data_normalized = (data - data_mean) / torch.sqrt(data_var) data_normalized . tensor([[ 1.72e-01, -8.18e-02, ..., -3.49e-01, -1.39e+00], [-6.57e-01, 2.16e-01, ..., 1.35e-03, -8.24e-01], ..., [-1.61e+00, 1.17e-01, ..., -9.63e-01, 1.86e+00], [-1.01e+00, -6.77e-01, ..., -1.49e+00, 1.04e+00]]) . bad_indexes = target &lt;= 3 # &lt;1&gt; bad_indexes.shape, bad_indexes.dtype, bad_indexes.sum() . (torch.Size([4898]), torch.bool, tensor(20)) . bad_data = data[bad_indexes] bad_data.shape . torch.Size([20, 11]) . bad_data = data[target &lt;= 3] mid_data = data[(target &gt; 3) &amp; (target &lt; 7)] # &lt;1&gt; good_data = data[target &gt;= 7] bad_mean = torch.mean(bad_data, dim=0) mid_mean = torch.mean(mid_data, dim=0) good_mean = torch.mean(good_data, dim=0) for i, args in enumerate(zip(col_list, bad_mean, mid_mean, good_mean)): print(&#39;{:2} {:20} {:6.2f} {:6.2f} {:6.2f}&#39;.format(i, *args)) . 0 fixed acidity 7.60 6.89 6.73 1 volatile acidity 0.33 0.28 0.27 2 citric acid 0.34 0.34 0.33 3 residual sugar 6.39 6.71 5.26 4 chlorides 0.05 0.05 0.04 5 free sulfur dioxide 53.33 35.42 34.55 6 total sulfur dioxide 170.60 141.83 125.25 7 density 0.99 0.99 0.99 8 pH 3.19 3.18 3.22 9 sulphates 0.47 0.49 0.50 10 alcohol 10.34 10.26 11.42 . total_sulfur_threshold = 141.83 total_sulfur_data = data[:,6] predicted_indexes = torch.lt(total_sulfur_data, total_sulfur_threshold) predicted_indexes.shape, predicted_indexes.dtype, predicted_indexes.sum() . (torch.Size([4898]), torch.bool, tensor(2727)) . actual_indexes = target &gt; 5 actual_indexes.shape, actual_indexes.dtype, actual_indexes.sum() . (torch.Size([4898]), torch.bool, tensor(3258)) . n_matches = torch.sum(actual_indexes &amp; predicted_indexes).item() n_predicted = torch.sum(predicted_indexes).item() n_actual = torch.sum(actual_indexes).item() n_matches, n_matches / n_predicted, n_matches / n_actual . (2018, 0.74000733406674, 0.6193984039287906) .",
            "url": "https://girijeshcse.github.io/scribble/2021/09/07/tabular-wine.html",
            "relUrl": "/2021/09/07/tabular-wine.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Chapter 2.2 CyclicGan",
            "content": "import torch import torch.nn as nn class ResNetBlock(nn.Module): # &lt;1&gt; def __init__(self, dim): super(ResNetBlock, self).__init__() self.conv_block = self.build_conv_block(dim) def build_conv_block(self, dim): conv_block = [] conv_block += [nn.ReflectionPad2d(1)] conv_block += [nn.Conv2d(dim, dim, kernel_size=3, padding=0, bias=True), nn.InstanceNorm2d(dim), nn.ReLU(True)] conv_block += [nn.ReflectionPad2d(1)] conv_block += [nn.Conv2d(dim, dim, kernel_size=3, padding=0, bias=True), nn.InstanceNorm2d(dim)] return nn.Sequential(*conv_block) def forward(self, x): out = x + self.conv_block(x) # &lt;2&gt; return out class ResNetGenerator(nn.Module): def __init__(self, input_nc=3, output_nc=3, ngf=64, n_blocks=9): # &lt;3&gt; assert(n_blocks &gt;= 0) super(ResNetGenerator, self).__init__() self.input_nc = input_nc self.output_nc = output_nc self.ngf = ngf model = [nn.ReflectionPad2d(3), nn.Conv2d(input_nc, ngf, kernel_size=7, padding=0, bias=True), nn.InstanceNorm2d(ngf), nn.ReLU(True)] n_downsampling = 2 for i in range(n_downsampling): mult = 2**i model += [nn.Conv2d(ngf * mult, ngf * mult * 2, kernel_size=3, stride=2, padding=1, bias=True), nn.InstanceNorm2d(ngf * mult * 2), nn.ReLU(True)] mult = 2**n_downsampling for i in range(n_blocks): model += [ResNetBlock(ngf * mult)] for i in range(n_downsampling): mult = 2**(n_downsampling - i) model += [nn.ConvTranspose2d(ngf * mult, int(ngf * mult / 2), kernel_size=3, stride=2, padding=1, output_padding=1, bias=True), nn.InstanceNorm2d(int(ngf * mult / 2)), nn.ReLU(True)] model += [nn.ReflectionPad2d(3)] model += [nn.Conv2d(ngf, output_nc, kernel_size=7, padding=0)] model += [nn.Tanh()] self.model = nn.Sequential(*model) def forward(self, input): # &lt;3&gt; return self.model(input) . netG = ResNetGenerator() . model_path = &#39;../data/p1ch2/horse2zebra_0.4.0.pth&#39; model_data = torch.load(model_path) netG.load_state_dict(model_data) . &lt;All keys matched successfully&gt; . netG.eval() . ResNetGenerator( (model): Sequential( (0): ReflectionPad2d((3, 3, 3, 3)) (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1)) (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (3): ReLU(inplace=True) (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)) (5): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (6): ReLU(inplace=True) (7): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)) (8): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (9): ReLU(inplace=True) (10): ResNetBlock( (conv_block): Sequential( (0): ReflectionPad2d((1, 1, 1, 1)) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (3): ReLU(inplace=True) (4): ReflectionPad2d((1, 1, 1, 1)) (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) ) ) (11): ResNetBlock( (conv_block): Sequential( (0): ReflectionPad2d((1, 1, 1, 1)) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (3): ReLU(inplace=True) (4): ReflectionPad2d((1, 1, 1, 1)) (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) ) ) (12): ResNetBlock( (conv_block): Sequential( (0): ReflectionPad2d((1, 1, 1, 1)) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (3): ReLU(inplace=True) (4): ReflectionPad2d((1, 1, 1, 1)) (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) ) ) (13): ResNetBlock( (conv_block): Sequential( (0): ReflectionPad2d((1, 1, 1, 1)) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (3): ReLU(inplace=True) (4): ReflectionPad2d((1, 1, 1, 1)) (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) ) ) (14): ResNetBlock( (conv_block): Sequential( (0): ReflectionPad2d((1, 1, 1, 1)) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (3): ReLU(inplace=True) (4): ReflectionPad2d((1, 1, 1, 1)) (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) ) ) (15): ResNetBlock( (conv_block): Sequential( (0): ReflectionPad2d((1, 1, 1, 1)) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (3): ReLU(inplace=True) (4): ReflectionPad2d((1, 1, 1, 1)) (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) ) ) (16): ResNetBlock( (conv_block): Sequential( (0): ReflectionPad2d((1, 1, 1, 1)) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (3): ReLU(inplace=True) (4): ReflectionPad2d((1, 1, 1, 1)) (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) ) ) (17): ResNetBlock( (conv_block): Sequential( (0): ReflectionPad2d((1, 1, 1, 1)) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (3): ReLU(inplace=True) (4): ReflectionPad2d((1, 1, 1, 1)) (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) ) ) (18): ResNetBlock( (conv_block): Sequential( (0): ReflectionPad2d((1, 1, 1, 1)) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (3): ReLU(inplace=True) (4): ReflectionPad2d((1, 1, 1, 1)) (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1)) (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) ) ) (19): ConvTranspose2d(256, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1)) (20): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (21): ReLU(inplace=True) (22): ConvTranspose2d(128, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1)) (23): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False) (24): ReLU(inplace=True) (25): ReflectionPad2d((3, 3, 3, 3)) (26): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1)) (27): Tanh() ) ) . from PIL import Image from torchvision import transforms . preprocess = transforms.Compose([transforms.Resize(256), transforms.ToTensor()]) . img = Image.open(&quot;../data/p1ch2/horse.jpg&quot;) img . img_t = preprocess(img) batch_t = torch.unsqueeze(img_t, 0) . batch_out = netG(batch_t) . out_t = (batch_out.data.squeeze() + 1.0) / 2.0 out_img = transforms.ToPILImage()(out_t) # out_img.save(&#39;../data/p1ch2/zebra.jpg&#39;) out_img .",
            "url": "https://girijeshcse.github.io/scribble/jupyter/2021/09/07/cyclegan.html",
            "relUrl": "/jupyter/2021/09/07/cyclegan.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Chapter 4 Real-world data representation using tensors",
            "content": "import numpy as np import torch torch.set_printoptions(edgeitems=2, threshold=50) . import imageio img_arr = imageio.imread(&#39;../data/p1ch4/image-dog/bobby.jpg&#39;) img_arr.shape . (720, 1280, 3) . img = torch.from_numpy(img_arr) out = img.permute(2, 0, 1) . batch_size = 3 batch = torch.zeros(batch_size, 3, 256, 256, dtype=torch.uint8) . import os data_dir = &#39;../data/p1ch4/image-cats/&#39; filenames = [name for name in os.listdir(data_dir) if os.path.splitext(name)[-1] == &#39;.png&#39;] for i, filename in enumerate(filenames): img_arr = imageio.imread(os.path.join(data_dir, filename)) img_t = torch.from_numpy(img_arr) img_t = img_t.permute(2, 0, 1) img_t = img_t[:3] # &lt;1&gt; batch[i] = img_t . batch = batch.float() batch /= 255.0 . n_channels = batch.shape[1] for c in range(n_channels): mean = torch.mean(batch[:, c]) std = torch.std(batch[:, c]) batch[:, c] = (batch[:, c] - mean) / std .",
            "url": "https://girijeshcse.github.io/scribble/jupyter/2021/09/07/chapter4-image-dog.html",
            "relUrl": "/jupyter/2021/09/07/chapter4-image-dog.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Chapter 4 Video",
            "content": "Video . import numpy as np import torch torch.set_printoptions(edgeitems=2, threshold=50) . When it comes to the shape of tensors, video data can be seen as equivalent to volumetric data, with depth replaced by the time dimension. The result is again a 5D tensor with shape N x C x T x H x W. . There are several formats for video, especially geared towards compression by exploiting redundancies in space and time. Luckily for us, imageio reads video data as well. Suppose we&#39;d like to retain 100 consecutive frames in our 512 x 512 RBG video for classifying an action using a convolutional neural network. We first create a reader instance for the video, that will allow us to get information about the video and iterate over the frames in time. Let&#39;s see what the meta data for the video looks like: . import imageio reader = imageio.get_reader(&#39;../data/p1ch4/video-cockatoo/cockatoo.mp4&#39;) meta = reader.get_meta_data() meta . {&#39;plugin&#39;: &#39;ffmpeg&#39;, &#39;nframes&#39;: 280, &#39;ffmpeg_version&#39;: &#39;4.1 built with gcc 8.2.1 (GCC) 20181017&#39;, &#39;fps&#39;: 20.0, &#39;source_size&#39;: (1280, 720), &#39;size&#39;: (1280, 720), &#39;duration&#39;: 14.0} . We now have all the information to size the tensor that will store the video frames: . n_channels = 3 n_frames = meta[&#39;nframes&#39;] video = torch.empty(n_channels, n_frames, *meta[&#39;size&#39;]) video.shape . torch.Size([3, 280, 1280, 720]) . Now we just iterate over the reader and set the values for all three channels into in the proper i-th time slice. This might take a few seconds to finish! . for i, frame_arr in enumerate(reader): frame = torch.from_numpy(frame_arr).float() video[:, i] = torch.transpose(frame, 0, 2) . In the above, we iterate over individual frames and set each frame in the C x T x H x W video tensor, after transposing the channel. We can then obtain a batch by stacking multiple 4D tensors or pre-allocating a 5D tensor with a known batch size and filling it iteratively, clip by clip, assuming clips are trimmed to a fixed number of frames. . Equating video data to volumetric data is not the only way to represent video for training purposes. This is a valid strategy if we deal with video bursts of fixed length. An alternative strategy is to resort to network architectures capable of processing long sequences and exploiting short and long-term relationships in time, just like for text or audio. // We&#39;ll see this kind of architectures when we take on recurrent networks. . This next approach accounts for time along the batch dimension. Hence, we&#39;ll build our dataset as a 4D tensor, stacking frame by frame in the batch: . time_video = torch.empty(n_frames, n_channels, *meta[&#39;size&#39;]) for i, frame in enumerate(reader): frame = torch.from_numpy(frame).float() time_video[i] = torch.transpose(frame, 0, 2) time_video.shape . torch.Size([280, 3, 1280, 720]) .",
            "url": "https://girijeshcse.github.io/scribble/jupyter/2021/09/07/X-video-cockatoo.html",
            "relUrl": "/jupyter/2021/09/07/X-video-cockatoo.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Chapter 02 summary",
            "content": "Playning with Pretrained models in PyTorch . What is a pretrained model? . We can think of a pretrained neural network as similar to a program that takes inputs and generates outputs. The behavior of such a program is dictated by the architecture of the neural network and by the examples it saw during training, in terms of desired input-output pairs, or desired properties that the output should satisfy. | . We will explore three popular pretrained models: a model that can label an image according to its content, another that can fabricate a new image from a real image, and a model that can describe the content of an image using proper English sentences. . The scope of this chapter is only how to run a pretrained model using PyTorch is a useful skill—full stop. Basically We are going to take our own images and feed them into our pretrained model, as described in figure below. This will result in a list of predicted labels for that image, which we can then examine to see what the model thinks our image is. Some images will have predictions that are accurate, and others will not! . Obtaining a pretrained network for image recognition . The predefined models can be found in torchvision.models . from torchvision import models . We can take a look at the actual models: . dir(models) . [&#39;AlexNet&#39;, &#39;DenseNet&#39;, &#39;GoogLeNet&#39;, &#39;GoogLeNetOutputs&#39;, &#39;Inception3&#39;, &#39;InceptionOutputs&#39;, &#39;MNASNet&#39;, &#39;MobileNetV2&#39;, &#39;MobileNetV3&#39;, &#39;ResNet&#39;, &#39;ShuffleNetV2&#39;, &#39;SqueezeNet&#39;, &#39;VGG&#39;, &#39;_GoogLeNetOutputs&#39;, .........] . The AlexNet architecture won the 2012 ILSVRC by a large margin, with a top-5 test error rate (that is, the correct label must be in the top 5 predictions) of 15.4%. By comparison, the second-best submission, which wasn’t based on a deep network, trailed at 26.2%. This was a defining moment in the history of computer vision: the moment when the community started to realize the potential of deep learning for vision tasks. That leap was followed by constant improvement, with more modern architectures and training methods getting top-5 error rates as low as 3%. . alexnet = models.AlexNet() . At this point, alexnet is an object that can run the AlexNet architecture.Practically speaking, assuming we have an input object of the right type, we can run the forward pass with output = alexnet(input). But if we did that, we would be feeding data through the whole network to produce … garbage! That’s because the network is uninitialized: its weights, the numbers by which inputs are added and multiplied, have not been trained on anything—the network itself is a blank (or rather, random) slate. We’d need to either train it from scratch or load weights from prior training, which we’ll do now. We learned that the uppercase names correspond to classes that implement popular architectures for computer vision. The lowercase names, on the other hand, are functions that instantiate models with predefined numbers of layers and units and optionally download and load pretrained weights into them. Note that there’s nothing essential about using one of these functions: they just make it convenient to instantiate the model with a number of layers and units that matches how the pretrained networks were built . Let’s create an instance of the network now. We’ll pass an argument that will instruct the function to download the weights of resnet101 trained on the ImageNet dataset, with 1.2 million images and 1,000 categories: . resnet = models.resnet101(pretrained=True) . Downloading: &quot;https://download.pytorch.org/models/resnet101-63fe2227.pth&quot; to C: Users hp/.cache torch hub checkpoints resnet101-63fe2227.pth 100.0% . resnet . ResNet( (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False) (layer1): Sequential( (0): Bottleneck( (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (downsample): Sequential( (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) ) ) ) (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0) (fc): Linear(in_features=2048, out_features=1000, bias=True) ) . What we are seeing here is modules, one per line. Note that they have nothing in common with Python modules: they are individual operations, the building blocks of a neural network. They are also called layers in other deep learning frameworks. If we scroll down, we’ll see a lot of Bottleneck modules repeating one after the other (101 of them!), containing convolutions and other modules. That’s the anatomy of a typical deep neural network for computer vision: a more or less sequential cascade of filters and nonlinear functions, ending with a layer (fc) producing scores for each of the 1,000 output classes (out_features). The resnet variable can be called like a function, taking as input one or more images and producing an equal number of scores for each of the 1,000 ImageNet classes. Before we can do that, however, we have to preprocess the input images so they are the right size and so that their values (colors) sit roughly in the same numerical range. In order to do that, the torchvision module provides transforms, which allow us to quickly define pipelines of basic preprocessing functions: . from torchvision import transforms preprocess = transforms.Compose([ transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), transforms.Normalize( mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225] )]) . In this case, we defined a preprocess function that will scale the input image to 256 × 256, crop the image to 224 × 224 around the center, transform it to a tensor (a PyTorch multidimensional array: in this case, a 3D array with color, height, and width), and normalize its RGB (red, green, blue) components so that they have defined means and standard deviations. These need to match what was presented to the network during training, if we want the network to produce meaningful answers . Let’s open a image and visualize it. . from PIL import Image img = Image.open(&quot;../data/p1ch2/bobby.jpg&quot;) . img . . And do the required preprocessing so that we can use it for prediction from our loaded pretrained model. . img_t = preprocess(img) . import torch batch_t = torch.unsqueeze(img_t, 0) . The process of running a trained model on new data is called inference in deep learning circles. In order to do inference, we need to put the network in eval mode: . resnet.eval() . ResNet( (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (avgpool): AdaptiveAvgPool2d(output_size=(1, 1)) (fc): Linear(in_features=2048, out_features=1000, bias=True) ) . If we forget to do that, some pretrained models, like batch normalization and dropout, will not produce meaningful answers, just because of the way they work internally. Now that eval has been set, we’re ready for inference: . out = resnet(batch_t) out . return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode) tensor([[-3.4997e+00, -1.6490e+00, -2.4391e+00, -3.2243e+00, -3.2465e+00, -........ 4.4534e+00]], grad_fn=&lt;AddmmBackward&gt;) . We now need to find out the label of the class that received the highest score. This will tell us what the model saw in the image. If the label matches how a human would describe the image, that’s great! It means everything is working. If not, then either something went wrong during training, or the image is so different from what the model expects that the model can’t process it properly, or there’s some other similar issue. . Let’s load the file containing the 1,000 labels for the ImageNet dataset classes: . with open(&#39;../data/p1ch2/imagenet_classes.txt&#39;) as f: labels = [line.strip() for line in f.readlines()] . _, index = torch.max(out, 1) . percentage = torch.nn.functional.softmax(out, dim=1)[0] * 100 labels[index[0]], percentage[index[0]].item() . (&#39;golden retriever&#39;, 96.57185363769531) . _, indices = torch.sort(out, descending=True) [(labels[idx], percentage[idx].item()) for idx in indices[0][:5]] . [(&#39;golden retriever&#39;, 96.57185363769531), (&#39;Labrador retriever&#39;, 2.6082706451416016), (&#39;cocker spaniel, English cocker spaniel, cocker&#39;, 0.2699621915817261), (&#39;redbone&#39;, 0.17958936095237732), (&#39;tennis ball&#39;, 0.10991999506950378)] . We see that the first four are dogs (redbone is a breed; who knew?), after which things start to get funny. The fifth answer, “tennis ball,” is probably because there are enough pictures of tennis balls with dogs nearby that the model is essentially saying, “There’s a 0.1% chance that I’ve completely misunderstood what a tennis ball is.” This is a great example of the fundamental differences in how humans and neural networks view the world, as well as how easy it is for strange, subtle biases to sneak into our data. .",
            "url": "https://girijeshcse.github.io/scribble/markdown/2021/09/05/Deep-Learning-with-PyTorch-ch02.html",
            "relUrl": "/markdown/2021/09/05/Deep-Learning-with-PyTorch-ch02.html",
            "date": " • Sep 5, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Chapter 01 summary",
            "content": "How deep learning has changed the way we look ! . This can be easily understood by this picture . . We need a way to ingest whatever data we have at hand. | We somehow need to define the deep learning machine. | We must have an automated way, training, to obtain useful representations and make the machine produce desired outputs. | . Why PyTorch . PyTorch gives us a data type, the Tensor, to hold numbers, vectors, matrices, or arrays in general. In addition, it provides functions for operating on them. | It provides accelerated computation using graphical processing units (GPUs), often yielding speedups in the range of 50x over doing the same calculation on a CPU. | PyTorch provides facilities that support numerical optimization on generic mathematical expressions, which deep learning uses for training. | One of the motivations for this capability is to provide a reliable strategy for deploying models in production. | Moving computations from the CPU to the GPU in PyTorch doesn’t require more than an additional function call or two. The second core thing that PyTorch provides is the ability of tensors to keep track of the operations performed on them and to analytically compute derivatives of an output of a computation with respect to any of its inputs. This is used for numerical optimization, and it is provided natively by tensors by virtue of dispatching through PyTorch’s autograd engine under the hood. | The core PyTorch modules for building neural networks are located in torch.nn, which provides common neural network layers and other architectural components. Fully connected layers, convolutional layers, activation functions, and loss functions can all be found here. | . A camparision to TensorFlow . TensorFlow has a robust pipeline to production, an extensive industry-wide community, and massive mindshare. PyTorch has made huge inroads with the research and teaching communities, thanks to its ease of use, and has picked up momentum since, as researchers and graduates train students and move to industry. . How PyTorch supports deep learning projects. . First we need to physically get the data, most often from some sort of storage as the data source. Then we need to convert each sample from our data into a something PyTorch can actually handle: tensors | This bridge between our custom data (in whatever format it might be) and a standardized PyTorch tensor is the Dataset class PyTorch provides in torch.utils.data. | we will need multiple processes to load our data, in order to assemble them into batches: tensors that encompass several samples. This is rather elaborate; but as it is also relatively generic, PyTorch readily provides all that magic in the DataLoader class. Its instances can spawn child processes to load data from a dataset in the background so that it’s ready and waiting for the training loop as soon as the loop can use it. | At each step in the training loop, we evaluate our model on the samples we got from the data loader. We then compare the outputs of our model to the desired output (the targets) using some criterion or loss function. | . . The training loop might be the most unexciting yet most time-consuming part of a deep learning project. At the end of it, we are rewarded with a model whose parameters have been optimized on our task: the trained model depicted to the right of the training loop in the figure. | PyTorch defaults to an immediate execution model (eager mode). Whenever an instruction involving PyTorch is executed by the Python interpreter, the corresponding operation is immediately carried out by the underlying C++ or CUDA implementation. | .",
            "url": "https://girijeshcse.github.io/scribble/markdown/2021/09/05/Deep-Learning-with-PyTorch-ch01.html",
            "relUrl": "/markdown/2021/09/05/Deep-Learning-with-PyTorch-ch01.html",
            "date": " • Sep 5, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Hypothesis Testing",
            "content": "Let understand hypothesis testing. .",
            "url": "https://girijeshcse.github.io/scribble/2021/08/27/Hypothesis-Testing.html",
            "relUrl": "/2021/08/27/Hypothesis-Testing.html",
            "date": " • Aug 27, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://girijeshcse.github.io/scribble/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://girijeshcse.github.io/scribble/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://girijeshcse.github.io/scribble/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://girijeshcse.github.io/scribble/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}